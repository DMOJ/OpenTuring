### Generated by Winemaker 0.8.3
###
### Invocation command line was
### /usr/bin/winemaker .


SRCDIR                = .
SUBDIRS               =
DLLS                  =
LIBS                  =
EXES                  = src.exe



### Common settings

CEXTRA                = -mno-cygwin
CXXEXTRA              = -mno-cygwin
RCEXTRA               =
DEFINES               = -DTPROLOG -Wno-sign-compare
INCLUDE_PATH          = -I.
DLL_PATH              =
DLL_IMPORTS           =
LIBRARY_PATH          =
LIBRARIES             =


### src.exe sources and settings

src_exe_MODULE        = src.exe
src_exe_C_SRCS        = dbgalloc.c \
			dbgctrl.c \
			dbgmain.c \
			ed.c \
			edbbar.c \
			edcrash.c \
			eddde.c \
			eddisp.c \
			ederr.c \
			edfail.c \
			edfalse.c \
			edfile.c \
			edglob.c \
			edgui.c \
			edjava.c \
			edjdb.c \
			edjdll.c \
			edlog.c \
			edmenu.c \
			edprint.c \
			edprog.c \
			edprop.c \
			edrec.c \
			edreg.c \
			edrun.c \
			edsearch.c \
			edsplash.c \
			edstat.c \
			edtext.c \
			edtur.c \
			edwin.c \
			jscon.c \
			jsdll.c \
			jsmain.c \
			jsmain.old.c \
			jstest.c \
			jstop.c \
			lang.c \
			readycon.c
src_exe_CXX_SRCS      = edjikes.cpp
src_exe_RC_SRCS       = ed.rc \
			js.rc \
			lang.rc
src_exe_LDFLAGS       = -mwindows \
			-mno-cygwin
src_exe_ARFLAGS       =
src_exe_DLL_PATH      =
src_exe_DLLS          = odbc32 \
			ole32 \
			oleaut32 \
			winspool \
			odbccp32
src_exe_LIBRARY_PATH  =
src_exe_LIBRARIES     = uuid

src_exe_OBJS          = $(src_exe_C_SRCS:.c=.o) \
			$(src_exe_CXX_SRCS:.cpp=.o) \
			$(src_exe_RC_SRCS:.rc=.res)



### Global source lists

C_SRCS                = $(src_exe_C_SRCS)
CXX_SRCS              = $(src_exe_CXX_SRCS)
RC_SRCS               = $(src_exe_RC_SRCS)


### Tools

CC = winegcc
CXX = wineg++
RC = wrc
AR = ar


### Generic targets

all: $(SUBDIRS) $(DLLS:%=%.so) $(LIBS) $(EXES)

### Build rules

.PHONY: all clean dummy

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

# Implicit rules

.SUFFIXES: .cpp .cxx .rc .res
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)

.c.o:
	$(CC) -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

RCFLAGS += _OPEN_TURING_
.rc.res:
	$(RC) $(RCFLAGS) $(RCEXTRA) -fo$@ $<

# Rules for cleaning

CLEAN_FILES     = y.tab.c y.tab.h lex.yy.c core *.orig *.rej \
                  \\\#*\\\# *~ *% .\\\#*

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(C_SRCS:.c=.o) $(CXX_SRCS:.cpp=.o)
	$(RM) $(DLLS:%=%.so) $(LIBS) $(EXES) $(EXES:%=%.so)

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

### Target specific build rules
DEFLIB = $(LIBRARY_PATH) $(LIBRARIES) $(DLL_PATH) $(DLL_IMPORTS:%=-l%)

$(src_exe_MODULE): $(src_exe_OBJS)
	$(CXX) $(src_exe_LDFLAGS) -o $@ $(src_exe_OBJS) $(src_exe_LIBRARY_PATH) $(src_exe_DLL_PATH) $(DEFLIB) $(src_exe_DLLS:%=-l%) $(src_exe_LIBRARIES:%=-l%)


