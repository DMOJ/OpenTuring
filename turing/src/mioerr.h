/************/
/* mioerr.h */
/************/

#ifndef _MIOERR_H_
#define _MIOERR_H_

//
// The myriad of MIO error return codes, broken down by family.
//

// Error number (errno) Bases

#define GENERAL_ERROR_BASE	100
#define FSYS_ERROR_BASE		200
#define STREAM_ERROR_BASE	300
#define FILE_ERROR_BASE		400
#define DIR_ERROR_BASE		500
#define PIC_ERROR_BASE		600
#define PEN_ERROR_BASE		700
#define BRUSH_ERROR_BASE	800
#define SPRITE_ERROR_BASE	900
#define FONT_ERROR_BASE		1000
#define DRAW_ERROR_BASE		1100
#define TIME_ERROR_BASE		1200
#define MOUSE_ERROR_BASE	1300
#define RGB_ERROR_BASE		1400
#define MUSIC_ERROR_BASE	1500
#define CONFIG_ERROR_BASE	1600
#define VIEW_ERROR_BASE		1700
#define WINDOW_ERROR_BASE	1800
#define PRINTER_ERROR_BASE	1900
#define TEXT_ERROR_BASE		2000
#define GUI_ERROR_BASE		2100
#define LEX_ERROR_BASE		2200
#define NET_ERROR_BASE		2300
#define JOY_ERROR_BASE		2400
#define PC_ERROR_BASE		2500
#define SYS_ERROR_BASE		2600
#define INI_FILE_ERROR_BASE	2700
#define STR_ERROR_BASE		2800
#define CRYPTO_ERROR_BASE	2900
#define HASHMAP_ERROR_BASE	3000

// None
enum NoErrorMessage
{
    E_Z_FIRST_NO_ERROR = -1,
    E_NO_ERROR,
    E_Z_LAST_NO_ERROR
};

// General
enum GeneralErrorMessages 
{
    E_Z_FIRST_GENERAL_ERROR = GENERAL_ERROR_BASE - 1,
    E_UNKNOWN_ERROR,
    E_INSUFFICIENT_MEMORY,
    E_NOT_SUPPORTED,
    E_NO_OPERATION,
    E_NO_OUTPUT_TO_SCREEN,
    E_NOT_ALLOWED_IN_TEXT_MODE,
    E_NOT_ALLOWED_IN_GRAPHICS_MODE,
    E_MUST_BE_IN_GRAPHICS_MODE,
    E_UNIMPLEMENTED_FEATURE,
    E_ENVIRON_WIN_CREATE_FAILED,
    E_ATTEMPT_TO_BIN_READ_FROM_KBD,
    E_ATTEMPT_TO_BIN_WRITE_TO_WIN,
    E_OUT_OF_ITEM_IDS,
    E_USER_PROGRAM_ACTIVATED_ERROR,
    E_Z_LAST_GENERAL_ERROR
};

// FileSys
enum FileSysErrorMessages 
{
    E_Z_FIRST_FSYS_ERROR = FSYS_ERROR_BASE - 1,
    E_FSYS_UNKNOWN_ERROR,
    E_FSYS_FILE_NOT_FOUND,
    E_FSYS_PATH_NOT_FOUND,
    E_FSYS_TOO_MANY_OPEN_FILES,
    E_FSYS_ACCESS_DENIED,
    E_FSYS_HANDLE_INVALID,
    E_FSYS_INSUFFICIENT_MEMORY,
    E_FSYS_ENVIRONMENT_INVALID,
    E_FSYS_FORMAT_INVALID,
    E_FSYS_ACCESS_CODE_INVALID,
    E_FSYS_DATA_INVALID,
    E_FSYS_READ_ONLY,
    E_FSYS_DISK_DRIVE_INVALID,
    E_FSYS_NOT_SAME_DEVICE,
    E_FSYS_NO_MORE_FILES,
    E_FSYS_WRITE_PROTECTED_DISK,
    E_FSYS_DRIVE_NOT_READY,
    E_FSYS_NO_DISK_IN_DRIVE,
    E_FSYS_UNKNOWN_COMMAND,
    E_FSYS_DATA_ERROR_CRC,
    E_FSYS_SEEK_ERROR,
    E_FSYS_UNKNOWN_MEDIA_TYPE,
    E_FSYS_SECTOR_NOT_FOUND,
    E_FSYS_PRINTER_OUT_OF_PAPER,
    E_FSYS_WRITE_ERROR,
    E_FSYS_READ_ERROR,
    E_FSYS_GENERAL_FAULT,
    E_FSYS_NO_SPACE_LEFT,
    E_FSYS_FILE_EXISTS,
    E_FSYS_DIR_EXISTS,
    E_FSYS_NOT_A_FILE,
    E_FSYS_CANT_READ_FROM_WDWFILE,
    E_FSYS_CANT_WRITE_TO_WDWFILE,
    E_FSYS_PATHNAME_MODIFIED,
    E_FSYS_CANT_GO_UP_FROM_ROOT_DIR,
    E_FSYS_BAD_CHAR_IN_PATHNAME,
    E_FSYS_MALFORMED_PATHNAME,
    E_FSYS_FUNCTION_NUMBER_INVALID,
    E_FSYS_MCB_DESTROYED,
    E_FSYS_MCB_INVALID,
    E_FSYS_BAD_REQ_LEN_STRUCT,
    E_FSYS_UNKNOWN_UNIT,
    E_FSYS_SHARING_VIOLATION,
    E_FSYS_TESTSUITE_NO_INPUT_FILE,
    E_FSYS_TESTSUITE_MUST_USE_DEFAULT_WIN,
    E_FSYS_CANT_READ_WRITE_TO_DIALOG_WIN,
    E_Z_LAST_FSYS_ERROR
};

//
// Error numbers grouped by associated OOT predef module
//

// Stream
enum StreamErrorMessages 
{
    E_Z_FIRST_STREAM_ERROR = STREAM_ERROR_BASE - 1,
    E_STREAM_UNKNOWN_ERROR,
    E_STREAM_NOT_AN_ID,
    E_STREAM_NEVER_OPENED,
    E_STREAM_CLOSED,
    E_STREAM_TOO_MANY_OPEN,
    E_STREAM_ILLEGAL_OPERATION,
    E_Z_LAST_STREAM_ERROR
};

// File
enum FileErrorMessages 
{
    E_Z_FIRST_FILE_ERROR = FILE_ERROR_BASE - 1,
    E_FILE_UNKNOWN_ERROR,
    E_FILE_IS_A_DIRECTORY,
    E_FILE_WIN95_CANNOT_HANDLE_NETWORK_SHARE,
    E_FILE_CANNOT_GET_PARENT_OF_ROOT,
    E_Z_LAST_FILE_ERROR
};

// Dir
enum DirErrorMessages 
{
    E_Z_FIRST_DIR_ERROR = DIR_ERROR_BASE - 1,
    E_DIR_UNKNOWN_ERROR,
    E_DIR_NOT_AN_ID,
    E_DIR_NEVER_OPENED,
    E_DIR_CLOSED,
    E_DIR_TOO_MANY_STREAMS,
    E_DIR_READ_PAST_EOF,
    E_DIR_NOT_A_DIRECTORY,
    E_DIR_ATTEMPTED_TO_REMOVE_CWD,
    E_DIR_CANT_ALLOC_MEM_FOR_DIR,
    E_DIR_IS_A_FILE,
    E_Z_LAST_DIR_ERROR
};

// Pic
enum PicErrorMessages 
{
    E_Z_FIRST_PIC_ERROR = PIC_ERROR_BASE - 1,
    E_PIC_UNKNOWN_ERROR,
    E_PIC_NOT_AN_ID,
    E_PIC_NEVER_NEWED,
    E_PIC_FREED,
    E_PIC_TOO_MANY,
    E_PIC_FAILURE,
    E_PIC_BAD_BOX,
    E_PIC_NOT_PIC_FILE,
    E_PIC_USED_BY_SPRITE,
    E_PIC_NOT_A_TAKEPIC_ARRAY,
    E_PIC_NOT_IN_SAME_GRAPHICS_MODE,
    E_PIC_MODE_OUT_OF_BOUNDS,
    E_PIC_MODE_UNSUPPORTED,
    E_PIC_COORDS_OFF_SCREEN,
    E_PIC_CANT_ALLOC_MEM_FOR_PIC,
    E_PIC_NO_MEM_TO_CONV_DRAWPIC,
    E_PIC_INSUFFICIENT_MEMORY,
    E_PIC_IO_ERROR,
    E_PIC_FILE_NOT_FOUND,
    E_PIC_WRITE_OPEN_FAILED,
    E_PIC_UNKNOWN_FILE_FORMAT,
    E_PIC_UNSUPPORTED_FILE_FORMAT,
    E_PIC_SCALE_TOO_SMALL,
    E_PIC_SCALE_TOO_LARGE,
    E_PIC_AXIS_OUT_OF_RANGE,
    E_PIC_CANT_ROTATE_THIS_DEPTH,
    E_PIC_IN_USE_BY_SPRITE,
    E_PIC_BAD_ARRAY_SIZE,
    E_PIC_UNKNOWN_TRANSITION,
    E_Z_LAST_PIC_ERROR
};

// Pen
enum PenErrorMessages 
{
    E_Z_FIRST_PEN_ERROR = PEN_ERROR_BASE - 1,
    E_PEN_UNKNOWN_ERROR,
    E_PEN_NOT_AN_ID,
    E_PEN_NEVER_NEWED,
    E_PEN_FREED,
    E_Z_LAST_PEN_ERROR
};

// Brush
enum BrushErrorMessages 
{
    E_Z_FIRST_BRUSH_ERROR = BRUSH_ERROR_BASE - 1,
    E_BRUSH_UNKNOWN_ERROR,
    E_BRUSH_NOT_AN_ID,
    E_BRUSH_NEVER_NEWED,
    E_BRUSH_FREED,
    E_Z_LAST_BRUSH_ERROR
};

// Sprite
enum SpriteErrorMessages 
{
    E_Z_FIRST_SPRITE_ERROR = SPRITE_ERROR_BASE - 1,
    E_SPRITE_UNKNOWN_ERROR,
    E_SPRITE_NOT_AN_ID,
    E_SPRITE_NEVER_NEWED,
    E_SPRITE_FREED,
    E_SPRITE_TOO_MANY,
    E_SPRITE_NO_CHANGE,
    E_SPRITE_FAILURE,
    E_Z_LAST_SPRITE_ERROR
};

// Font
enum FontErrorMessages 
{
    E_Z_FIRST_FONT_ERROR = FONT_ERROR_BASE - 1,
    E_FONT_UNKNOWN_ERROR,
    E_FONT_NOT_AN_ID,
    E_FONT_NEVER_NEWED,
    E_FONT_FREED,    
    E_FONT_CANT_FREE_DEFAULT,
    E_FONT_TOO_MANY,
    E_FONT_NAME_NOT_FOUND,
    E_FONT_UNKNOWN_FONT_STYLE,
    E_FONT_BAD_FONT_SELECT_STR,
    E_FONT_DIDNT_GET_REQUESTED_FONT,
    E_Z_LAST_FONT_ERROR
};

// Draw
enum DrawErrorMessages 
{
    E_Z_FIRST_DRAW_ERROR = DRAW_ERROR_BASE - 1,
    E_DRAW_UNKNOWN_ERROR,
    E_DRAW_CLIPPED,
    E_DRAW_FAILURE,
    E_DRAW_TOO_COMPLICATED,
    E_DRAW_CLR_NUM_TOO_SMALL,
    E_DRAW_CLR_NUM_TOO_LARGE,
    E_DRAW_CANT_ALLOC_POLY_PTS,
    E_Z_LAST_DRAW_ERROR
};

// Time
enum TimeErrorMessages 
{
    E_Z_FIRST_TIME_ERROR = TIME_ERROR_BASE - 1,
    E_TIME_UNKNOWN_ERROR,
    E_TIME_INVALID_TIME_STR,
    E_TIME_INVALID_DATE_STR,
    E_TIME_SECONDS_OUT_OF_RANGE,
    E_TIME_BAD_DAY,
    E_TIME_BAD_MONTH,
    E_TIME_BAD_YEAR,
    E_TIME_BAD_HOUR,
    E_TIME_BAD_MINUTE,
    E_TIME_BAD_SECOND,
    E_Z_LAST_TIME_ERROR
};

// Mouse
enum MouseErrorMessages 
{
    E_Z_FIRST_MOUSE_ERROR = MOUSE_ERROR_BASE - 1,
    E_MOUSE_UNKNOWN_ERROR,
    E_MOUSE_NONE_INSTALLED,
    E_MOUSE_BAD_BUTTONCHOOSE_STR,
    E_MOUSE_BAD_BUTTONMOTION_STR,
    E_Z_LAST_MOUSE_ERROR
};

// RGB
enum RGBErrorMessages 
{
    E_Z_FIRST_RGB_ERROR = RGB_ERROR_BASE - 1,
    E_RGB_UNKNOWN_ERROR,
    E_RGB_BAD_NUM,
    E_RGB_FAILURE,
    E_RGB_COULD_NOT_SET_CLR,
    E_RGB_RED_OUT_OF_RANGE,
    E_RGB_GREEN_OUT_OF_RANGE,
    E_RGB_BLUE_OUT_OF_RANGE,
    E_RGB_TABLE_FULL,
    E_Z_LAST_RGB_ERROR
};

// Music
enum MusicErrorMessages 
{
    E_Z_FIRST_MUSIC_ERROR = MUSIC_ERROR_BASE - 1,
    E_MUSIC_UNKNOWN_ERROR,
    E_MUSIC_NO_NOTES,
    E_MUSIC_BAD_PLAY_CHAR,
    E_MUSIC_BAD_NOTE_LENGTH,
    E_MUSIC_FREQUENCY_OUT_OF_RANGE,
    E_MUSIC_DURATION_OUT_OF_RANGE,
    E_MUSIC_MIDI_OPEN_ERROR,
    E_MUSIC_MIDI_PLAY_ERROR,
    E_MUSIC_CD_OPEN_ERROR,
    E_MUSIC_CD_PLAY_ERROR,
    E_MUSIC_WAVE_OPEN_ERROR,
    E_MUSIC_WAVE_PLAY_ERROR,
    E_MUSIC_CLOSE_ERROR,
    E_MUSIC_GET_STATUS_ERROR,
    E_MUSIC_NOTE_OPEN_ERROR,
    E_MUSIC_NOTE_PLAY_ERROR,
    E_MUSIC_FREQ_OPEN_ERROR,
    E_MUSIC_FREQ_PLAY_ERROR,
    E_MUSIC_MP3_OPEN_ERROR,
    E_MUSIC_MP3_PLAY_ERROR,
    E_MUSIC_DISABLED,
    E_MUSIC_UNKNOWN_FILE_TYPE,
    E_MUSIC_IO_ERROR,
    E_MUSIC_BAD_MUSIC_FILE,
    E_Z_LAST_MUSIC_ERROR
};

// Config
enum ConfigErrorMessages 
{
    E_Z_FIRST_CONFIG_ERROR = CONFIG_ERROR_BASE - 1,
    E_CONFIG_UNKNOWN_ERROR,
    E_CONFIG_UNKNOWN_DISPLAY_CODE,
    E_CONFIG_UNKNOWN_LANG_CODE,
    E_CONFIG_UNKNOWN_MACHINE_CODE,
    E_CONFIG_CANT_GET_INFORMATION,
    E_Z_LAST_CONFIG_ERROR
};

// View
enum ViewErrorMessages 
{
    E_Z_FIRST_VIEW_ERROR = VIEW_ERROR_BASE - 1,
    E_VIEW_UNKNOWN_ERROR,
    E_VIEW_OUTSIDE_CLIPPING_REGION,
    E_VIEW_X_TOO_SMALL,
    E_VIEW_X_TOO_LARGE,
    E_VIEW_Y_TOO_SMALL,
    E_VIEW_Y_TOO_LARGE,
    E_VIEW_SET_BAD_CURSOR_SIZE,
    E_VIEW_SET_UNKNOWN_GRAPH_MODE,
    E_VIEW_SET_BAD_GRAPHICS_MODE,
    E_VIEW_SET_UNKNOWN_GRAPH_DEPTH,
    E_VIEW_SET_UNSUPP_GRAPH_MODE,
    E_VIEW_SET_GRAPHICS_MODE_FAILED,
    E_VIEW_SET_BAD_POSITION,
    E_VIEW_SET_UNKNOWN_SET_COMMAND,
    E_Z_LAST_VIEW_ERROR
};

// Window
enum WindowErrorMessages 
{
    E_Z_FIRST_WINDOW_ERROR = WINDOW_ERROR_BASE - 1,
    E_WINDOW_UNKNOWN_ERROR,
    E_WINDOW_NOT_AN_ID,
    E_WINDOW_NEVER_OPENED,
    E_WINDOW_CLOSED,
    E_WINDOW_SET_BAD_OPTION,
    E_WINDOW_GET_FROM_INVISIBLE,
    E_WINDOW_OBSOLETE_OPEN,
    E_WINDOW_OBSOLETE_CLOSE,
    E_WINDOW_CANT_SEEK,
    E_WINDOW_CANT_TELL,
    E_WINDOW_CANT_READ,
    E_WINDOW_CANT_WRITE,
    E_WINDOW_NOT_RUN_WINDOW,
    E_Z_LAST_WINDOW_ERROR
};

// Printer
enum PrinterErrorMessages 
{
    E_Z_FIRST_PRINTER_ERROR = PRINTER_ERROR_BASE - 1,
    E_PRINTER_UNKNOWN_ERROR,
    E_PRINTER_NOT_AN_ID,
    E_PRINTER_NEVER_OPENED,
    E_PRINTER_CLOSED,
    E_PRINTER_OBSOLETE_OPEN,
    E_PRINTER_OBSOLETE_CLOSE,
    E_PRINTER_CANT_SEEK,
    E_PRINTER_CANT_TELL,
    E_PRINTER_CANT_READ,
    E_PRINTER_CANT_WRITE,
    E_Z_LAST_PRINTER_ERROR
};

// Text
enum TextErrorMessages 
{
    E_Z_FIRST_TEXT_ERROR = TEXT_ERROR_BASE - 1,
    E_TEXT_UNKNOWN_ERROR,
    E_TEXT_ROW_TOO_SMALL,
    E_TEXT_ROW_TOO_LARGE,
    E_TEXT_COL_TOO_SMALL,
    E_TEXT_COL_TOO_LARGE,
    E_TEXT_WHATTEXTCHAR_DEAD,
    E_Z_LAST_TEXT_ERROR
};

// GUI
enum ErrorMessages 
{
    E_Z_FIRST_GUI_ERROR = GUI_ERROR_BASE - 1,
    E_GUI_UNKNOWN_ERROR,
    E_GUI_MISSING_BUTTON_TEXT,
    E_Z_LAST_GUI_ERROR
};

// Lexer
enum LexerErrorMessages 
{
    E_Z_FIRST_LEX_ERROR = LEX_ERROR_BASE - 1,
    E_LEX_UNKNOWN_ERROR,
    E_LEX_NOT_AN_ID,
    E_LEX_NEVER_INITIALIZED,
    E_LEX_TOO_MANY_STREAMS,
    E_LEX_STREAM_ALREADY_OPEN,
    E_LEX_TABLE_ERROR,
    E_LEX_ENDED,
    E_LEX_CANT_ALLOC_MEM_FOR_TABLE,
    E_Z_LAST_LEX_ERROR
};

// Hashmap
enum HashmapErrorMessages 
{
    E_Z_FIRST_HASHMAP_ERROR = HASHMAP_ERROR_BASE - 1,
    E_HASHMAP_UNKNOWN_ERROR,
    E_HASHMAP_NOT_AN_ID,
    E_HASHMAP_NEVER_INITIALIZED,
    E_HASHMAP_TOO_MANY_STREAMS,
    E_HASHMAP_STREAM_ALREADY_OPEN,
    E_HASHMAP_TABLE_ERROR,
    E_HASHMAP_FREED,
    E_Z_LAST_HASHMAP_ERROR
};

// Net
enum NetErrorMessages 
{
    E_Z_FIRST_NET_ERROR = NET_ERROR_BASE - 1,
    E_NET_UNKNOWN_ERROR,
    E_NET_NOT_AN_ID,
    E_NET_NEVER_OPENED,
    E_NET_MISSING_ADDRESS,
    E_NET_INVALID_PORT,
    E_NET_BAD_ADDRESS,
    E_NET_NAME_RESOLUTION_FAILED,
    E_NET_READ_PAST_EOF,
    E_NET_CLOSED,
    E_NET_INIT_FAILED,
    E_NET_CONNECTION_ABORTED,
    E_NET_CONNECTION_ABORTED_REMOTE,
    E_NET_BAD_COOKIE_URL,
    E_NET_NO_COOKIE_FOR_URL,
    E_NET_NO_COOKIE_FOR_THIS_NAME,
    E_NET_ARRAY_TOO_SMALL,
    E_NET_DONT_USE_EOF,
    E_Z_LAST_NET_ERROR
};

// Joystick
enum JoystickErrorMessages 
{
    E_Z_FIRST_JOY_ERROR = JOY_ERROR_BASE - 1,
    E_JOY_UNKNOWN_ERROR,
    E_JOY_NO_DRIVER,
    E_JOY_BAD_ID,
    E_JOY_UNPLUGGED,
    E_Z_LAST_JOY_ERROR
};

// PC
enum PCErrorMessages 
{
    E_Z_FIRST_PC_ERROR = PC_ERROR_BASE - 1,
    E_PC_UNKNOWN_ERROR,
    E_PC_ILLEGAL_PORT_ERROR,
    E_PC_INIT_FAILED,
    E_Z_LAST_PC_ERROR
};

// Sys
enum SysErrorMessages 
{
    E_Z_FIRST_SYS_ERROR = SYS_ERROR_BASE - 1,
    E_SYS_UNKNOWN_ERROR,
    E_SYS_ENV_VAR_NOT_FOUND,
    E_SYS_ENV_VAR_TOO_LONG,
    E_SYS_NOT_ENOUGH_SYSTEM_MEMORY,
    E_SYS_BAD_EXE_FILE,
    E_SYS_ACCESS_DENIED,
    E_SYS_BAD_FILE_ASSOC,
    E_SYS_NO_FILE_ASSOC,
    E_SYS_SHARING_VIOLATION,
    E_SYS_SYSEXEC_NOT_ALLOWED,
    E_Z_LAST_SYS_ERROR
};


// IniFile
enum IniFileErrorMessages 
{
    E_Z_FIRST_INI_FILE_ERROR = INI_FILE_ERROR_BASE - 1,
    E_INI_FILE_UNKNOWN_ERROR,
    E_INI_FILE_BAD_SECTION,
    E_INI_FILE_MISSING_EQUALS,
    E_INI_FILE_SECTION_NOT_FOUND,
    E_INI_FILE_PROPERTY_NOT_FOUND,
    E_INI_FILE_PROPERTY_NOT_BOOLEAN,
    E_INI_FILE_PROPERTY_NOT_INT,
    E_INI_FILE_PROPERTY_NOT_REAL,
    E_INI_FILE_NO_INI_FILE_OPEN,
    E_INI_FILE_AT_END_OF_LIST,
    E_INI_FILE_ARRAY_TOO_SMALL,
    E_Z_LAST_INI_FILE_ERROR
};


// Str
enum StrErrorMessages 
{
    E_Z_FIRST_STR_ERROR = STR_ERROR_BASE - 1,
    E_STR_UNKNOWN_ERROR,
    E_STR_ARRAY_POS_OUT_OF_BOUNDS,
    E_STR_NUM_CHARS_TOO_LARGE,
    E_STR_PARTIAL_LINE,
    E_STR_LINE_TOO_LONG,
    E_STR_CHAR_ARRAY_TOO_SMALL_FOR_WRITE_LINE,
    E_STR_SRC_ARRAY_POS_OUT_OF_BOUNDS,
    E_STR_DEST_ARRAY_POS_OUT_OF_BOUNDS,
    E_STR_CHAR_ARRAY_TOO_SMALL_FOR_CHAR_COPY,
    E_Z_LAST_STR_ERROR
};


//Cryptography
enum CryptoErrorMessages
{
    E_Z_FIRST_CRYPTO_ERROR = CRYPTO_ERROR_BASE - 1,
    E_CRYPTO_UNKNOWN_ERROR,
    E_CRYPTO_MUST_BE_MULTIPLE_OF_8,
    E_CRYPTO_NUM_CHARS_TOO_LARGE,
    E_Z_LAST_CRYPTO_ERROR 
};

#endif /* #ifndef _MIOERR_H_ */


