#
# TEMPORARY Build file, AUTO-GENERATED by http://vcproj2cmake.sf.net
# DO NOT CHECK INTO VERSION CONTROL OR APPLY "PERMANENT" MODIFICATIONS!!
#

# >= 2.6 due to crucial set_property(... COMPILE_DEFINITIONS_* ...)
cmake_minimum_required(VERSION 2.6)
if(COMMAND cmake_policy)
  if(POLICY CMP0005)
    cmake_policy(SET CMP0005 NEW) # automatic quoting of brackets
  endif(POLICY CMP0005)

  if(POLICY CMP0011)
    # we do want the includer to be affected by our updates,
    # since it might define project-global settings.
    cmake_policy(SET CMP0011 OLD)
  endif(POLICY CMP0011)
  if(POLICY CMP0015)
    # .vcproj contains relative paths to additional library directories, thus we need to be able to cope with that
    cmake_policy(SET CMP0015 NEW)
  endif(POLICY CMP0015)
endif(COMMAND cmake_policy)

set(CMAKE_MODULE_PATH "././cmake/Modules" ${CMAKE_MODULE_PATH})

set(V2C_CONFIG_DIR_LOCAL "./cmake/vcproj2cmake")

# include the main file for pre-defined vcproj2cmake helper functions
include(vcproj2cmake_func)

# include the main file for pre-defined vcproj2cmake definitions
include(vcproj2cmake_defs)

include(${V2C_CONFIG_DIR_LOCAL}/hook_pre.txt OPTIONAL)

project( TLib )

# this part is for including a file which contains
# _globally_ applicable settings for all sub projects of a master project
# (compiler flags, path settings, platform stuff, ...)
# e.g. have vcproj2cmake-specific MasterProjectDefaults_vcproj2cmake
# which then _also_ includes a global MasterProjectDefaults module
# for _all_ CMakeLists.txt. This needs to sit post-project()
# since e.g. compiler info is dependent on a valid project.
# MasterProjectDefaults_vcproj2cmake is supposed to define
# generic settings (such as V2C_HOOK_PROJECT, defined as e.g.
# ./cmake/vcproj2cmake/hook_project.txt, and other hook include variables below).
# NOTE: it usually should also reset variables V2C_LIBS, V2C_SOURCES etc.
# as used below since they should contain directory-specific contents only, not accumulate!
include(MasterProjectDefaults_vcproj2cmake OPTIONAL)
# hook e.g. for invoking Find scripts as expected by
# the _LIBRARIES / _INCLUDE_DIRS mappings created
# by your include/dependency map files.
include(${V2C_HOOK_PROJECT} OPTIONAL)

    set(SOURCES_files_Source_Files
      ../tlib/main.c
      ../tlib/TL.c
      ../tlib/TLA.c
      ../tlib/TLA4AD.c
      ../tlib/TLA4CM.c
      ../tlib/TLA4DN.c
      ../tlib/TLA4DV.c
      ../tlib/TLA4ML.c
      ../tlib/TLA4MN.c
      ../tlib/TLA4MX.c
      ../tlib/TLA8AD.c
      ../tlib/TLA8CD.c
      ../tlib/TLA8CL.c
      ../tlib/TLA8CM.c
      ../tlib/TLA8CR.c
      ../tlib/TLA8DN.c
      ../tlib/TLA8DV.c
      ../tlib/TLA8FL.c
      ../tlib/TLA8GX.c
      ../tlib/TLA8LN.c
      ../tlib/TLA8MD.c
      ../tlib/TLA8ML.c
      ../tlib/TLA8MN.c
      ../tlib/TLA8MX.c
      ../tlib/TLA8QR.c
      ../tlib/TLA8RD.c
      ../tlib/TLA8RE.c
      ../tlib/TLA8SD.c
      ../tlib/TLA8SG.c
      ../tlib/TLA8SR.c
      ../tlib/TLA8SX.c
      ../tlib/TLA8T.c
      ../tlib/TLA8TD.c
      ../tlib/TLA8TR.c
      ../tlib/TLA8X.c
      ../tlib/TLA8XP.c
      ../tlib/TLAIMD.c
      ../tlib/TLAIMN.c
      ../tlib/TLAIMX.c
      ../tlib/TLANMD.c
      ../tlib/TLAPII.c
      ../tlib/TLAPRI.c
      ../tlib/TLAPRR.c
      ../tlib/TLARNI.c
      ../tlib/TLARNR.c
      ../tlib/TLARNZ.c
      ../tlib/TLARSC.c
      ../tlib/TLARSR.c
      ../tlib/TLARSZ.c
      ../tlib/TLARZ.c
      ../tlib/TLAV48.c
      ../tlib/TLAV84.c
      ../tlib/TLAV8D.c
      ../tlib/TLAVD8.c
      ../tlib/TLAVES.c
      ../tlib/TLAVFS.c
      ../tlib/TLAVI4.c
      ../tlib/TLAVI8.c
      ../tlib/TLAVN4.c
      ../tlib/TLAVN8.c
      ../tlib/TLAVRS.c
      ../tlib/TLAVS8.c
      ../tlib/TLAVSI.c
      ../tlib/TLAVSN.c
      ../tlib/TLB.c
      ../tlib/TLBALL.c
      ../tlib/TLBDAL.c
      ../tlib/TLBFRC.c
      ../tlib/TLBFRU.c
      ../tlib/TLBNWC.c
      ../tlib/TLBNWU.c
      ../tlib/TLBUNI.c
      ../tlib/TLBUNR.c
      ../tlib/TLBUUN.c
      ../tlib/TLC.c
      ../tlib/TLCALL.c
      ../tlib/TLCCLR.c
      ../tlib/TLCCON.c
      ../tlib/TLCDIF.c
      ../tlib/TLCEQ.c
      ../tlib/TLCGEQ.c
      ../tlib/TLCIN.c
      ../tlib/TLCINT.c
      ../tlib/TLCLEQ.c
      ../tlib/TLCNEQ.c
      ../tlib/TLCUN.c
      ../tlib/TLCXOR.c
      ../tlib/TLdata.c
      ../tlib/TLE.c
      ../tlib/TLEABT.c
      ../tlib/TLECR.c
      ../tlib/TLECRL.c
      ../tlib/TLECRS.c
      ../tlib/TLEDH.c
      ../tlib/TLEH.c
      ../tlib/TLEHE.c
      ../tlib/TLEHX.c
      ../tlib/TLELF.c
      ../tlib/TLEQUIT.c
      ../tlib/TLETR.c
      ../tlib/TLI.c
      ../tlib/TLICL.c
      ../tlib/TLIEFR.c
      ../tlib/TLIEOF.c
      ../tlib/TLIFA.c
      ../tlib/TLIFS.c
      ../tlib/TLIGC.c
      ../tlib/TLIGCB.c
      ../tlib/TLIGF.c
      ../tlib/TLIGI.c
      ../tlib/TLIGIB.c
      ../tlib/TLIGK.c
      ../tlib/TLIGN.c
      ../tlib/TLIGR.c
      ../tlib/TLIGS.c
      ../tlib/TLIGSS.c
      ../tlib/TLIGSW.c
      ../tlib/TLIGT.c
      ../tlib/TLIOA.c
      ../tlib/TLIOF.c
      ../tlib/TLIOP.c
      ../tlib/tlios.c
      ../tlib/TLIPC.c
      ../tlib/TLIPE.c
      ../tlib/TLIPF.c
      ../tlib/TLIPI.c
      ../tlib/TLIPK.c
      ../tlib/TLIPN.c
      ../tlib/TLIPR.c
      ../tlib/TLIPS.c
      ../tlib/TLIRE.c
      ../tlib/TLIRER.c
      ../tlib/TLISF.c
      ../tlib/TLISK.c
      ../tlib/TLISKE.c
      ../tlib/TLISS.c
      ../tlib/TLISSI.c
      ../tlib/TLISSO.c
      ../tlib/TLISSS.c
      ../tlib/TLITL.c
      ../tlib/TLIWR.c
      ../tlib/TLIWRR.c
      ../tlib/TLIZ.c
      ../tlib/TLIZC.c
      ../tlib/TLK.c
      ../tlib/TLM.c
      ../tlib/TLMCDINI.c
      ../tlib/TLMCDSIG.c
      ../tlib/TLMCDWT.c
      ../tlib/TLMCEMP.c
      ../tlib/TLMCFIN.c
      ../tlib/TLMCLEN.c
      ../tlib/TLMCPINI.c
      ../tlib/TLMCPSIG.c
      ../tlib/TLMCPWT.c
      ../tlib/TLMCRINI.c
      ../tlib/TLMCRSIG.c
      ../tlib/TLMCRWT.c
      ../tlib/TLMCTINI.c
      ../tlib/TLMCTSIG.c
      ../tlib/TLMCTWT.c
      ../tlib/TLMDCTWT.c
      ../tlib/TLMDENT.c
      ../tlib/TLMDEXT.c
      ../tlib/TLMDINI.c
      ../tlib/TLMGNEP.c
      ../tlib/TLMIPENT.c
      ../tlib/TLMIPEXT.c
      ../tlib/TLMIPINI.c
      ../tlib/TLMRENT.c
      ../tlib/TLMREXT.c
      ../tlib/TLMRFIN.c
      ../tlib/TLMRINI.c
      ../tlib/TLMUDUMP.c
      ../tlib/TLS.c
      ../tlib/TLSASN.c
      ../tlib/TLSBS.c
      ../tlib/TLSBSS.c
      ../tlib/TLSBSX.c
      ../tlib/TLSBX.c
      ../tlib/TLSBXS.c
      ../tlib/TLSBXX.c
      ../tlib/TLSCAT.c
      ../tlib/TLSCSS.c
      ../tlib/TLSCSX.c
      ../tlib/TLSCTA.c
      ../tlib/TLSCXS.c
      ../tlib/TLSCXX.c
      ../tlib/TLSDEL.c
      ../tlib/TLSIND.c
      ../tlib/TLSLEN.c
      ../tlib/TLSMCC.c
      ../tlib/TLSMCS.c
      ../tlib/TLSMSC.c
      ../tlib/TLSMSS.c
      ../tlib/TLSREC.c
      ../tlib/TLSRES.c
      ../tlib/TLSRPT.c
      ../tlib/TLSVCS.c
      ../tlib/TLSVES.c
      ../tlib/TLSVFS.c
      ../tlib/TLSVIS.c
      ../tlib/TLSVNS.c
      ../tlib/TLSVRS.c
      ../tlib/TLSVS8.c
      ../tlib/TLSVSI.c
      ../tlib/TLSVSN.c
      ../tlib/TLX.c
    )
    source_group("Source Files" FILES ${SOURCES_files_Source_Files})

    set(SOURCES_Source_Files
      ${SOURCES_files_Source_Files}
    )

    set(SOURCES_files_Header_Files
      ../tlib/include/cinterface
      ../tlib/include/kernelTypes
      ../tlib/include/memory
    )
    source_group("Header Files" FILES ${SOURCES_files_Header_Files})

    set(SOURCES_Header_Files
      ${SOURCES_files_Header_Files}
    )

  set(SOURCES_
    ${SOURCES_Source_Files}
    ${SOURCES_Header_Files}
  )

include_directories(BEFORE ${PROJECT_SOURCE_DIR})

include(${V2C_HOOK_POST_SOURCES} OPTIONAL)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")

  include_directories(
    ../../ready/src
    ../../ready/src/tools
    p:/turing/tlib/include
  )

  # hook include after all definitions have been made
  # (but _before_ target is created using the source list!)
  include(${V2C_HOOK_POST_DEFINITIONS} OPTIONAL)

  set(SOURCES
    ${SOURCES_}
    ${V2C_SOURCES}
  )

  link_directories(
    ${V2C_LIB_DIRS}
  )

  add_library( TLib STATIC ${SOURCES} )

  target_link_libraries(TLib
    ${V2C_LIBS}
  )

  # e.g. to be used for tweaking target properties etc.
  include(${V2C_HOOK_POST_TARGET} OPTIONAL)
endif(CMAKE_BUILD_TYPE STREQUAL "Debug")
if(TARGET TLib)

  if(UNUSED__MANAGED_BY_CMAKE)
    set_property(TARGET TLib APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG
      WIN32
      _WINDOWS
    )
  endif(UNUSED__MANAGED_BY_CMAKE)

  set_property(TARGET TLib APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG
    _CRTDBG_MAP_ALLOC
    _DEBUG
    _LIB
    _MEMORY_CHECK
    _WIN32_IE=0x0300
    _WINOOT_
  )
endif(TARGET TLib)

if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE STREQUAL "Release")

  include_directories(
    p:/turing/tlib/include
  )

  # hook include after all definitions have been made
  # (but _before_ target is created using the source list!)
  include(${V2C_HOOK_POST_DEFINITIONS} OPTIONAL)

  set(SOURCES
    ${SOURCES_}
    ${V2C_SOURCES}
  )

  link_directories(
    ${V2C_LIB_DIRS}
  )

  add_library( TLib STATIC ${SOURCES} )

  target_link_libraries(TLib
    ${V2C_LIBS}
  )

  # e.g. to be used for tweaking target properties etc.
  include(${V2C_HOOK_POST_TARGET} OPTIONAL)
endif(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE STREQUAL "Release")
if(TARGET TLib)

  if(UNUSED__MANAGED_BY_CMAKE)
    set_property(TARGET TLib APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE
      WIN32
    )
  endif(UNUSED__MANAGED_BY_CMAKE)

  set_property(TARGET TLib APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE
    NDEBUG
    _LIB
  )
endif(TARGET TLib)

#set_property(TARGET TLib PROPERTY PROJECT_LABEL "TLib")

v2c_rebuild_on_update(TLib "${CMAKE_CURRENT_SOURCE_DIR}/TLib.vcproj" ${CMAKE_CURRENT_LIST_FILE} "vcproj2cmake/scripts/vcproj2cmake.rb" ".")

include(${V2C_HOOK_POST} OPTIONAL)
